<template>
  <div class="flex flex-col flex-1 overflow-hidden rounded-b-lg bg-slate-25 dark:bg-slate-800">
    <div class="flex flex-1 overflow-auto">
      <ConversationWrap :grouped-messages="groupedMessages" />
    </div>


    <div v-if="showQuestions" class="questions-container">
      <div
        v-for="(question, index) in defaultQuestions"
        :key="index"
        class="question-item"
        :style="{
          backgroundColor: widgetColor,
          color: textColor
        }"
        @click="sendQuestion(question)"
      >
        {{ question }}
      </div>
    </div>

    <div class="footer-container">
      <ChatFooter class="px-5" @send-message="handleSendMessage" />
    </div>
  </div>
</template>

<script>
import { mapGetters } from 'vuex';
import { fetchDefaultQuestions } from '../api/questions'; 
import ChatFooter from '../components/ChatFooter.vue';
import ConversationWrap from '../components/ConversationWrap.vue';
import { getContrastingTextColor } from '@chatwoot/utils';

export default {
  components: {
    ChatFooter,
    ConversationWrap
  },
  data() {
    return {
      showQuestions: false,  
      defaultQuestions: [], 
    };
  },
  computed: {
    ...mapGetters({
      groupedMessages: 'conversation/getGroupedConversation',
      widgetColor: 'appConfig/getWidgetColor'
    }),
    textColor() {
      return getContrastingTextColor(this.widgetColor); 
    }
  },
  mounted() {
    this.$store.dispatch('conversation/setUserLastSeen');
    this.getQuestions(); 
  },
  methods: {
    // Fetch questions from the API
    async getQuestions() {
      const ownerUserId = 'a34fff-4432432ebc332-43243cd'; // Replace with actual owner_user_id
      const widgetToken = 'mMKTs9cAaEA3cBgck9WKKBsK'; // Replace with actual widget_token

      try {
        const fetchedQuestions = await fetchDefaultQuestions(ownerUserId, widgetToken);
        if (fetchedQuestions.length) {
          this.defaultQuestions = fetchedQuestions;
          this.showQuestions = true; // Show questions when available
        } else {
          console.error('No default questions available');
        }
      } catch (error) {
        console.error('Error fetching questions:', error);
      }
    },

    // Send selected question as a message
    sendQuestion(question) {
      this.$store.dispatch('conversation/sendMessage', {
        content: question,
        message_type: 'incoming',
      });
      this.showQuestions = false; 
    },

    // Handle custom user input and send message
    handleSendMessage(message) {
      this.showQuestions = false; // Hide questions if user types something
      this.$store.dispatch('conversation/sendMessage', {
        content: message,
        message_type: 'incoming',
      });
    }
  }
};
</script>

<style scoped>
.questions-container {
  padding: 20px;
  min-height: calc(100vh - 60px); 
}

.question-item {
  padding: 12px 16px;
  border-radius: 20px 4px 4px 20px; 
  text-align: left;
  max-width: 80%;
  margin-left: auto;
  margin-bottom: 12px;
}

.footer-container {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
}

/* Optional: add some padding around the footer */
.footer-container .px-5 {
  padding: 10px;
}
</style>
